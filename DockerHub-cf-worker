'use strict'

const hub_host = 'registry-1.docker.io'
const auth_url = 'https://auth.docker.io'
const workers_url = 'https://你的域名'

const CORS_HEADERS = {
    'access-control-allow-origin': '*',
    'access-control-allow-methods': 'GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS',
    'access-control-allow-headers': '*',
    'access-control-max-age': '1728000',
    'access-control-expose-headers': '*',
    'Cache-Control': 'max-age=1500'
};

/**
 * @param {any} body
 * @param {number} status
 * @param {Object<string, string>} headers
 */
function makeRes(body, status = 200, headers = {}) {
    headers['access-control-allow-origin'] = '*';
    return new Response(body, { status, headers });
}

/**
 * @param {Request} request
 */
function getRequestHeaders(request) {
    return {
        'Host': hub_host,
        'User-Agent': request.headers.get("User-Agent"),
        'Accept': request.headers.get("Accept"),
        'Accept-Language': request.headers.get("Accept-Language"),
        'Accept-Encoding': request.headers.get("Accept-Encoding"),
        'Connection': 'keep-alive',
        'Cache-Control': 'max-age=0',
        'Authorization': request.headers.get("Authorization") || undefined
    };
}

/**
 * @param {string} url
 * @param {Request} request
 * @param {Object<string, string>} headers
 */
async function fetchWithParams(url, request, headers) {
    const response = await fetch(new Request(url, request), { headers, cacheTtl: 3600 });
    const responseHeaders = new Headers(response.headers);
    if (responseHeaders.get("Www-Authenticate")) {
        const authHeader = responseHeaders.get("Www-Authenticate").replace(new RegExp(auth_url, 'g'), workers_url);
        responseHeaders.set("Www-Authenticate", authHeader);
    }
    return new Response(response.body, { status: response.status, headers: responseHeaders });
}

addEventListener('fetch', e => {
    const response = handleRequest(e).catch(err => makeRes('Worker error:\n' + err.stack, 502));
    e.respondWith(response);
});

async function handleRequest(e) {
    const { request } = e;
    const url = new URL(request.url);

    if (request.method === 'OPTIONS') {
        return new Response(null, { status: 204, headers: CORS_HEADERS });
    }

    if (url.pathname === '/token') {
        const tokenUrl = `${auth_url}${url.pathname}${url.search}`;
        return fetchWithParams(tokenUrl, request, getRequestHeaders(request));
    }

    url.hostname = hub_host;
    const response = await fetchWithParams(url.href, request, getRequestHeaders(request));
    const responseHeaders = new Headers(response.headers);
    for (const [key, value] of Object.entries(CORS_HEADERS)) {
        responseHeaders.set(key, value);
    }
    return new Response(response.body, { status: response.status, headers: responseHeaders });
}
